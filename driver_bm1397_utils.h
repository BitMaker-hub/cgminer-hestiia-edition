#include "math.h"
#include "miner.h"
#include "uart_utils.h"
#include "klist.h"


//** BM1397 HEADER **//
#define BM1397_HEADER_1  0x55
#define BM1397_HEADER_2  0xAA

#define BM1397_TYPE_SEND_JOB (1 << 5)
#define BM1397_TYPE_SEND_CMD (2 << 5)

#define BM1397_SINGLE_CHIP (0 << 4)
#define BM1397_CHAINED_CHIP (1 << 4)

#define BM1397_CMD_SEND_JOB 1

#define BM1397_CMD_CHIP_ADDR 0
#define BM1397_CMD_WRITE_REG 1
#define BM1397_CMD_READ_REG 2
#define BM1397_CMD_CHAIN_INCTV 3

//** CHIP_ADRESSES **//
#define BM1397_DEFAULT_CHIP_ADDR 0x00

//** CRC5_PLACEHOLDER **//
#define BM1397_CRC5_PLACEHOLDER 0x00

//** COMMANDS **//
#define BM1397_CHAIN_WRITE_REG (BM1397_TYPE_SEND_CMD | BM1397_CHAINED_CHIP | BM1397_CMD_WRITE_REG)  // 0x51
#define BM1397_SINGLE_WRITE_REG (BM1397_TYPE_SEND_CMD | BM1397_SINGLE_CHIP | BM1397_CMD_WRITE_REG)  //0x41

#define BM1397_CHAIN_READ_REG (BM1397_TYPE_SEND_CMD | BM1397_CHAINED_CHIP | BM1397_CMD_READ_REG)   // 0x52
#define BM1397_SINGLE_READ_REG (BM1397_TYPE_SEND_CMD | BM1397_SINGLE_CHIP | BM1397_CMD_READ_REG)  //0x42

#define BM1397_CHAIN_INACTIVE (BM1397_TYPE_SEND_CMD | BM1397_CHAINED_CHIP | BM1397_CMD_CHAIN_INCTV)  // 0x53

#define BM1397_SET_CHIP_ADDR (BM1397_TYPE_SEND_CMD | BM1397_SINGLE_CHIP | BM1397_CMD_CHIP_ADDR)  // 0x40
//** REGISTERS **//

#define BM1397_CHIP_ADDR 0x00
#define BM1397_HASH_RATE 0x04
#define BM1397_PLL0 0x08
#define BM1397_CHIP_NONCE_OFFSET 0x0C
#define BM1397_HASH_COUNTING_NUMBER 0x10
#define BM1397_TICKET_MASK 0x14
#define BM1397_MISC_CONTROL 0x18
#define BM1397_I2C_CONTROLE 0x1C
#define BM1397_ORDERED_CLOCK_ENABLE 0x20
#define BM1397_FAST_UART_CONFIG 0x28
#define BM1397_UART_RELAY 0x2C
#define BM1397_TICKET_MASK2 0x38
#define BM1397_CORE_REGISTER_CONTROL 0x3C
#define BM1397_CORE_REGISTER_VALUE 0x40
#define BM1397_PLL3_PARAMETER 0x68
#define BM1397_PLL0_DIVIDER 0x70
#define BM1397_CLOCK_ORDER_CONTROL0 0x80
#define BM1397_CLOCK_ORDER_CONTROL1 0x84
//TODO : Add all registers


//** BM1397 PROTOCOL **//
// Utils stuff
void stuff_lsb(unsigned char *dst, uint32_t x);
void stuff_msb(unsigned char *dst, uint32_t x);
void stuff_reverse(unsigned char *dst, unsigned char *src, uint32_t len);
uint64_t bound(uint64_t value, uint64_t lower_bound, uint64_t upper_bound);


//